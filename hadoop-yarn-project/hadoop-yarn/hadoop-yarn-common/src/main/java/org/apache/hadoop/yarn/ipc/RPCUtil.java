/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.hadoop.yarn.ipc;

import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.InetSocketAddress;

import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.ipc.RemoteException;
import org.apache.hadoop.net.NetUtils;
import org.apache.hadoop.yarn.exceptions.YarnException;

import com.google.protobuf.ServiceException;

@InterfaceAudience.LimitedPrivate({ "MapReduce", "YARN" })
public class RPCUtil {

  /**
   * Returns an instance of {@link YarnException}
   */
  public static YarnException getRemoteException(Throwable t) {
    return new YarnException(t);
  }

  /**
   * Returns an instance of {@link YarnException}
   */
  public static YarnException getRemoteException(String message) {
    return new YarnException(message);
  }

  private static <T extends Throwable> T instantiateException(
      Class<? extends T> cls, RemoteException re) throws RemoteException {
    try {
      Constructor<? extends T> cn = cls.getConstructor(String.class);
      cn.setAccessible(true);
      T ex = cn.newInstance(re.getMessage());
      ex.initCause(re);
      return ex;
      // RemoteException contains useful information as against the
      // java.lang.reflect exceptions.
    } catch (NoSuchMethodException e) {
      throw re;
    } catch (IllegalArgumentException e) {
      throw re;
    } catch (SecurityException e) {
      throw re;
    } catch (InstantiationException e) {
      throw re;
    } catch (IllegalAccessException e) {
      throw re;
    } catch (InvocationTargetException e) {
      throw re;
    }
  }

  /**
   * Utility method that unwraps and returns appropriate exceptions.
   * 
   * @param se
   *          ServiceException
   * @return An instance of the actual exception, which will be a subclass of
   *         {@link YarnException} or {@link IOException}
   */
  public static Void unwrapAndThrowException(ServiceException se)
      throws IOException, YarnException {
    Throwable cause = se.getCause();
    if (cause == null) {
      // SE generated by the RPC layer itself.
      throw new IOException(se);
    } else {
      if (cause instanceof RemoteException) {
        RemoteException re = (RemoteException) cause;
        Class<?> realClass = null;
        try {
          realClass = Class.forName(re.getClassName());
        } catch (ClassNotFoundException cnf) {
          // Assume this to be a new exception type added to YARN. This isn't
          // absolutely correct since the RPC layer could add an exception as
          // well.
          throw instantiateException(YarnException.class, re);
        }

        if (YarnException.class.isAssignableFrom(realClass)) {
          throw instantiateException(
              realClass.asSubclass(YarnException.class), re);
        } else if (IOException.class.isAssignableFrom(realClass)) {
          throw instantiateException(realClass.asSubclass(IOException.class),
              re);
        } else if (RuntimeException.class.isAssignableFrom(realClass)) {
          throw instantiateException(
              realClass.asSubclass(RuntimeException.class), re);
        } else {
          throw re;
        }
        // RemoteException contains useful information as against the
        // java.lang.reflect exceptions.

      } else if (cause instanceof IOException) {
        // RPC Client exception.
        throw (IOException) cause;
      } else if (cause instanceof RuntimeException) {
        // RPC RuntimeException
        throw (RuntimeException) cause;
      } else {
        // Should not be generated.
        throw new IOException(se);
      }
    }
  }

  /**
   * Get the socket address for <code>hostProperty</code> as a
   * <code>InetSocketAddress</code>. If <code>hostProperty</code> is
   * <code>null</code>, <code>addressProperty</code> will be used. This
   * is useful for cases where we want to differentiate between host
   * bind address and address clients should use to establish connection.
   *
   * @param conf the configuration.
   * @param hostProperty bind host property name.
   * @param addressProperty address property name.
   * @param defaultAddress the default value
   * @param defaultPort the default port
   * @return InetSocketAddress
   */
  public static InetSocketAddress getSocketAddr(
      Configuration conf,
      String hostProperty,
      String addressProperty,
      String defaultAddress,
      int defaultPort) {

    final String host = conf.get(hostProperty);
    final String address = conf.get(addressProperty, defaultAddress);

    InetSocketAddress bindAddr = NetUtils.createSocketAddr(
        address, defaultPort, addressProperty);

    if (host == null || host.isEmpty()) {
      return bindAddr;
    }

    return NetUtils.createSocketAddr(
        host, bindAddr.getPort(), hostProperty);
  }

  /**
   * Set the socket address a client can use to connect for the
   * <code>property</code> property as a <code>host:port</code>. The
   * listening port of the server address will be used with the hostname
   * of the client address to construct the connect address. The wildcard
   * address is replaced with the local host's address.
   * 
   * @param conf the configuration
   * @param property property name for the connect address
   * @param defaultValue default property for connect address
   * @param serverAddr InetSocketAddress to be used as connect address
   * @return InetSocketAddress for clients to connect
   */
  public static InetSocketAddress updateConnectAddr(
      Configuration conf,
      String property,
      String defaultValue,
      InetSocketAddress serverAddr) {

    String connectHost = conf.getTrimmed(property, defaultValue).split(":")[0];
    // Create connect address using client address hostname and server port.
    return conf.updateConnectAddr(property, NetUtils.createSocketAddrForHost(
        connectHost, serverAddr.getPort()));
  }

  /**
   * Get the address to use for binding where bind hostname can be specified
   * to override the hostname in the connect address. Port specified in the
   * address will be used.
   * 
   * @param conf the configuration
   * @param hostProperty bind host property name
   * @param address connect address String
   * @param defaultPort default value for port
   * @return String representing bind address
   */
  public static String getAddressAsString(
      Configuration conf,
      String hostProperty,
      String address,
      int defaultPort) {

    // If the bind-host setting exists then it overrides the hostname
    // portion of the corresponding address.
    String host = conf.getTrimmed(hostProperty);
    if (host != null && !host.isEmpty()) {
      if (address.contains(":")) {
        address = host + ":" + address.split(":")[1];
      }
      else {
        address = host + ":" + defaultPort;
      }
    }

    return address;
  }
}
