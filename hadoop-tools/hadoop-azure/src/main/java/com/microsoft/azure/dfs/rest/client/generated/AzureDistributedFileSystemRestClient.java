/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.dfs.rest.client.generated;

import java.io.InputStream;

import com.microsoft.azure.dfs.rest.client.generated.models.ContentType;
import com.microsoft.azure.dfs.rest.client.generated.models.CreateFilesystemHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.CreatePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.DeleteFilesystemHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.DeletePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ErrorSchemaException;
import com.microsoft.azure.dfs.rest.client.generated.models.GetFilesystemPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.GetPathPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.LeasePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ListPathsHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ListSchema;
import com.microsoft.azure.dfs.rest.client.generated.models.ReadPathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.SetFilesystemPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.UpdatePathHeaders;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import rx.Observable;

import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;

/**
 * The interface for AzureDistributedFileSystemRestClient class.
 */
@InterfaceAudience.Public
@InterfaceStability.Evolving
public interface AzureDistributedFileSystemRestClient {
  /**
   * Gets the REST client.
   *
   * @return the {@link RestClient} object.
   */
  RestClient restClient();

  /**
   * The default base URL.
   */
  String DEFAULT_BASE_URL = "http://account.dfs.core.windows.net";

  /**
   * Gets Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization..
   *
   * @return the xMsVersion value.
   */
  String xMsVersion();

  /**
   * Sets Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization..
   *
   * @param xMsVersion the xMsVersion value.
   * @return the service client itself
   */
  AzureDistributedFileSystemRestClient withXMsVersion(String xMsVersion);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void createFilesystem(String filesystem, String resource);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                        dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                        characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> createFilesystemAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> createFilesystemAsync(String filesystem, String resource);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> createFilesystemWithServiceResponseAsync(String filesystem, String resource);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void createFilesystem(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String xMsClientRequestId, Integer timeout, String
      authorization, String xMsDate);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> createFilesystemAsync(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> createFilesystemAsync(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate);

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> createFilesystemWithServiceResponseAsync(String filesystem, String resource, String
      xMsProperties, String xMsOriginationId, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component  The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void setFilesystemProperties(String component, String filesystem, String resource);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component       The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                        dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                        characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> setFilesystemPropertiesAsync(String component, String filesystem, String resource, final ServiceCallback<Void> serviceCallback);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component  The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> setFilesystemPropertiesAsync(String component, String filesystem, String resource);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component  The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> setFilesystemPropertiesWithServiceResponseAsync(String component, String
      filesystem, String resource);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component          The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void setFilesystemProperties(String component, String filesystem, String resource, String xMsProperties, String xMsClientRequestId, Integer timeout, String
      authorization, String xMsDate);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component          The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> setFilesystemPropertiesAsync(String component, String filesystem, String resource, String xMsProperties, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component          The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> setFilesystemPropertiesAsync(String component, String filesystem, String resource, String xMsProperties, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate);

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param component          The component to be updated.  Must be "properties" to set the properties of a filesystem.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> setFilesystemPropertiesWithServiceResponseAsync(String component, String
      filesystem, String resource, String xMsProperties, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified, the list
   *                   will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the ListSchema object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  ListSchema listPaths(boolean recursive, String filesystem, String resource);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive       If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified, the
   *                        list will only include paths that share the same root.
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                        dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                        characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, final ServiceCallback<ListSchema> serviceCallback);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified, the list
   *                   will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified, the list
   *                   will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> listPathsWithServiceResponseAsync(boolean recursive, String filesystem, String resource);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified,
   *                           the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param prefix             Filter results to paths beginning with the specified prefix.
   * @param segmentId          An optional value that identifies the segment of the list to be returned with the next list operation. The operation returns
   *                           the "segmentId" within the response body if the list returned was not complete. The "segmentId" may then be used in a
   *                           subsequent call to request the next segment of the list.
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the ListSchema object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  ListSchema listPaths(boolean recursive, String filesystem, String resource, String prefix, String segmentId, Integer maxResults, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified,
   *                           the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param prefix             Filter results to paths beginning with the specified prefix.
   * @param segmentId          An optional value that identifies the segment of the list to be returned with the next list operation. The operation returns
   *                           the "segmentId" within the response body if the list returned was not complete. The "segmentId" may then be used in a
   *                           subsequent call to request the next segment of the list.
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, String prefix, String segmentId, Integer maxResults, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate, final ServiceCallback<ListSchema> serviceCallback);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified,
   *                           the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param prefix             Filter results to paths beginning with the specified prefix.
   * @param segmentId          An optional value that identifies the segment of the list to be returned with the next list operation. The operation returns
   *                           the "segmentId" within the response body if the list returned was not complete. The "segmentId" may then be used in a
   *                           subsequent call to request the next segment of the list.
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, String prefix, String segmentId, Integer maxResults, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "prefix" is specified,
   *                           the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param prefix             Filter results to paths beginning with the specified prefix.
   * @param segmentId          An optional value that identifies the segment of the list to be returned with the next list operation. The operation returns
   *                           the "segmentId" within the response body if the list returned was not complete. The "segmentId" may then be used in a
   *                           subsequent call to request the next segment of the list.
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> listPathsWithServiceResponseAsync(boolean recursive, String filesystem, String
      resource, String prefix, String segmentId, Integer maxResults, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void getFilesystemProperties(String filesystem, String resource);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                        dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                        characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> getFilesystemPropertiesAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> getFilesystemPropertiesAsync(String filesystem, String resource);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> getFilesystemPropertiesWithServiceResponseAsync(String filesystem, String
      resource);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void getFilesystemProperties(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> getFilesystemPropertiesAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> getFilesystemPropertiesAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization, String
      xMsDate);

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> getFilesystemPropertiesWithServiceResponseAsync(String filesystem, String
      resource, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional
   * HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void deleteFilesystem(String filesystem, String resource);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                        dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                        characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> deleteFilesystemAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> deleteFilesystemAsync(String filesystem, String resource);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the dash
   *                   (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63 characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> deleteFilesystemWithServiceResponseAsync(String filesystem, String resource);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void deleteFilesystem(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> deleteFilesystemAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization, String
      xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> deleteFilesystemAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds. While
   * the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service
   * returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or
   * directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                           the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                           and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> deleteFilesystemWithServiceResponseAsync(String filesystem, String resource, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void createPath(String resource, String filesystem, String path);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource        The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> createPathAsync(String resource, String filesystem, String path, final ServiceCallback<Void> serviceCallback);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> createPathAsync(String resource, String filesystem, String path);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> createPathWithServiceResponseAsync(String resource, String filesystem, String path);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource             The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem           The filesystem identifier.
   * @param path                 The file or directory path.
   * @param contentLength        Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater than 0
   *                             and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentType          Optional.  The MIME type for a file.  The default is "application/octet-stream". Possible values include:
   *                             'application/octet-stream', 'text/plain'
   * @param contentEncoding      Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client when the
   *                             "Read File" operation is performed.
   * @param contentLanguage      Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5           Optional.  An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport. When
   *                             this header is specified, the storage service validates the hash. If the two hashes do not match, the operation will fail
   *                             with error code 400 (Bad Request).
   * @param xMsCacheControl      Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType       Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding   Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage   Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5        Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsRenameSource      An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".  If
   *                             "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties
   *                             will be preserved.
   * @param xMsLeaseAction       Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The lease ID is
   *                            returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId           Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and the lease
   *                            ID must match.
   * @param xMsProposedLeaseId   Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the proposed ID
   *                             when the resource is created.
   * @param xMsSourceLeaseAction Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the rename
   *                             operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId     Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the lease ID
   *                            must match.
   * @param xMsProperties        A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId     A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param requestBody          Optional.  The content of the file to be created.
   * @param xMsClientRequestId   A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout              An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                             timeout value elapses before the operation completes, the operation fails.
   * @param authorization        Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate              Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void createPath(String resource, String filesystem, String path, String contentLength, ContentType contentType, String contentEncoding, String
      contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String
      xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String xMsSourceLeaseAction, String
      xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource             The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem           The filesystem identifier.
   * @param path                 The file or directory path.
   * @param contentLength        Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater than 0
   *                             and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentType          Optional.  The MIME type for a file.  The default is "application/octet-stream". Possible values include:
   *                             'application/octet-stream', 'text/plain'
   * @param contentEncoding      Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client when the
   *                             "Read File" operation is performed.
   * @param contentLanguage      Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5           Optional.  An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport. When
   *                             this header is specified, the storage service validates the hash. If the two hashes do not match, the operation will fail
   *                             with error code 400 (Bad Request).
   * @param xMsCacheControl      Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType       Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding   Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage   Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5        Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsRenameSource      An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".  If
   *                             "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties
   *                             will be preserved.
   * @param xMsLeaseAction       Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The lease ID is
   *                            returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId           Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and the lease
   *                            ID must match.
   * @param xMsProposedLeaseId   Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the proposed ID
   *                             when the resource is created.
   * @param xMsSourceLeaseAction Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the rename
   *                             operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId     Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the lease ID
   *                            must match.
   * @param xMsProperties        A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId     A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param requestBody          Optional.  The content of the file to be created.
   * @param xMsClientRequestId   A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout              An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                             timeout value elapses before the operation completes, the operation fails.
   * @param authorization        Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate              Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> createPathAsync(String resource, String filesystem, String path, String contentLength, ContentType contentType, String contentEncoding,
      String contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String
      xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String xMsSourceLeaseAction, String
      xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource             The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem           The filesystem identifier.
   * @param path                 The file or directory path.
   * @param contentLength        Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater than 0
   *                             and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentType          Optional.  The MIME type for a file.  The default is "application/octet-stream". Possible values include:
   *                             'application/octet-stream', 'text/plain'
   * @param contentEncoding      Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client when the
   *                             "Read File" operation is performed.
   * @param contentLanguage      Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5           Optional.  An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport. When
   *                             this header is specified, the storage service validates the hash. If the two hashes do not match, the operation will fail
   *                             with error code 400 (Bad Request).
   * @param xMsCacheControl      Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType       Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding   Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage   Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5        Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsRenameSource      An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".  If
   *                             "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties
   *                             will be preserved.
   * @param xMsLeaseAction       Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The lease ID is
   *                            returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId           Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and the lease
   *                            ID must match.
   * @param xMsProposedLeaseId   Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the proposed ID
   *                             when the resource is created.
   * @param xMsSourceLeaseAction Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the rename
   *                             operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId     Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the lease ID
   *                            must match.
   * @param xMsProperties        A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId     A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param requestBody          Optional.  The content of the file to be created.
   * @param xMsClientRequestId   A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout              An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                             timeout value elapses before the operation completes, the operation fails.
   * @param authorization        Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate              Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> createPathAsync(String resource, String filesystem, String path, String contentLength, ContentType contentType, String contentEncoding,
      String contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String
      xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String xMsSourceLeaseAction, String
      xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate);

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource             The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem           The filesystem identifier.
   * @param path                 The file or directory path.
   * @param contentLength        Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater than 0
   *                             and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentType          Optional.  The MIME type for a file.  The default is "application/octet-stream". Possible values include:
   *                             'application/octet-stream', 'text/plain'
   * @param contentEncoding      Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client when the
   *                             "Read File" operation is performed.
   * @param contentLanguage      Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5           Optional.  An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport. When
   *                             this header is specified, the storage service validates the hash. If the two hashes do not match, the operation will fail
   *                             with error code 400 (Bad Request).
   * @param xMsCacheControl      Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType       Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding   Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage   Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5        Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsRenameSource      An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".  If
   *                             "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties
   *                             will be preserved.
   * @param xMsLeaseAction       Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The lease ID is
   *                            returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId           Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and the lease
   *                            ID must match.
   * @param xMsProposedLeaseId   Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the proposed ID
   *                             when the resource is created.
   * @param xMsSourceLeaseAction Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the rename
   *                             operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId     Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the lease ID
   *                            must match.
   * @param xMsProperties        A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId     A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param requestBody          Optional.  The content of the file to be created.
   * @param xMsClientRequestId   A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout              An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                             timeout value elapses before the operation completes, the operation fails.
   * @param authorization        Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate              Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> createPathWithServiceResponseAsync(String resource, String filesystem, String path, String
      contentLength, ContentType contentType, String contentEncoding, String contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType,
      String xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String
      xMsProposedLeaseId, String xMsSourceLeaseAction, String xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, byte[] requestBody, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void updatePath(String resource, String filesystem, String path);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource        The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> updatePathAsync(String resource, String filesystem, String path, final ServiceCallback<Void> serviceCallback);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> updatePathAsync(String resource, String filesystem, String path);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> updatePathWithServiceResponseAsync(String resource, String filesystem, String path);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param component          The component to be updated.  Must be "data" to upload data to be appended to a file or to flush previously uploaded data to a
   *                          file. Must be "properties" to only set the properties of a file or directory.
   * @param xMsLeaseAction     Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param position           This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is
   *                           required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value
   *                           must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To
   *                           flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of
   *                           the file after all data has been written, and there must not be a request entity body included with the request.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param contentLength      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes
   *                           for "Append Data".
   * @param contentMD5         Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param xMsCacheControl    Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType     Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5      Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param requestBody        Optional.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void updatePath(String resource, String filesystem, String path, String component, String xMsLeaseAction, Long position, String xMsLeaseId, String
      contentLength, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String
      xMsContentMd5, String xMsProperties, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param component          The component to be updated.  Must be "data" to upload data to be appended to a file or to flush previously uploaded data to a
   *                          file. Must be "properties" to only set the properties of a file or directory.
   * @param xMsLeaseAction     Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param position           This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is
   *                           required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value
   *                           must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To
   *                           flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of
   *                           the file after all data has been written, and there must not be a request entity body included with the request.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param contentLength      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes
   *                           for "Append Data".
   * @param contentMD5         Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param xMsCacheControl    Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType     Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5      Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param requestBody        Optional.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> updatePathAsync(String resource, String filesystem, String path, String component, String xMsLeaseAction, Long position, String
      xMsLeaseId, String contentLength, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage,
      String xMsContentMd5, String xMsProperties, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate, final
  ServiceCallback<Void> serviceCallback);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param component          The component to be updated.  Must be "data" to upload data to be appended to a file or to flush previously uploaded data to a
   *                          file. Must be "properties" to only set the properties of a file or directory.
   * @param xMsLeaseAction     Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param position           This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is
   *                           required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value
   *                           must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To
   *                           flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of
   *                           the file after all data has been written, and there must not be a request entity body included with the request.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param contentLength      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes
   *                           for "Append Data".
   * @param contentMD5         Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param xMsCacheControl    Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType     Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5      Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param requestBody        Optional.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> updatePathAsync(String resource, String filesystem, String path, String component, String xMsLeaseAction, Long position, String
      xMsLeaseId, String contentLength, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage,
      String xMsContentMd5, String xMsProperties, byte[] requestBody, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param component          The component to be updated.  Must be "data" to upload data to be appended to a file or to flush previously uploaded data to a
   *                          file. Must be "properties" to only set the properties of a file or directory.
   * @param xMsLeaseAction     Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param position           This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is
   *                           required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value
   *                           must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To
   *                           flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of
   *                           the file after all data has been written, and there must not be a request entity body included with the request.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param contentLength      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes
   *                           for "Append Data".
   * @param contentMD5         Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param xMsCacheControl    Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File" operations.
   * @param xMsContentType     Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File" operations.
   * @param xMsContentEncoding Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5      Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File" operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                           list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                           in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                           first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for
   *                           all properties.
   * @param requestBody        Optional.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> updatePathWithServiceResponseAsync(String resource, String filesystem, String path, String
      component, String xMsLeaseAction, Long position, String xMsLeaseId, String contentLength, String contentMD5, String xMsCacheControl, String
      xMsContentType,
      String xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsProperties, byte[] requestBody, String xMsClientRequestId, Integer
      timeout, String authorization, String xMsDate);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to create a
   *                      new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the "leaseId" to
   *                      release a lease.
   * @param xMsLeaseId     The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                       actions, this must match the current lease ID.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void leasePath(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction  There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to create
   *                        a new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the "leaseId" to
   *                        release a lease.
   * @param xMsLeaseId      The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                        actions, this must match the current lease ID.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> leasePathAsync(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path, final ServiceCallback<Void> serviceCallback);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to create a
   *                      new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the "leaseId" to
   *                      release a lease.
   * @param xMsLeaseId     The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                       actions, this must match the current lease ID.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> leasePathAsync(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to create a
   *                      new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the "leaseId" to
   *                      release a lease.
   * @param xMsLeaseId     The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                       actions, this must match the current lease ID.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> leasePathWithServiceResponseAsync(String xMsLeaseAction, String xMsLeaseId, String
      filesystem, String path);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to
   *                           create a new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the
   *                           "leaseId" to release a lease.
   * @param xMsLeaseId         The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                          actions, this must match the current lease ID.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void leasePath(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path, Integer xMsLeaseDuration, String xMsClientRequestId, Integer
      timeout, String authorization, String xMsDate);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to
   *                           create a new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the
   *                           "leaseId" to release a lease.
   * @param xMsLeaseId         The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                          actions, this must match the current lease ID.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> leasePathAsync(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path, Integer xMsLeaseDuration, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to
   *                           create a new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the
   *                           "leaseId" to release a lease.
   * @param xMsLeaseId         The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                          actions, this must match the current lease ID.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> leasePathAsync(String xMsLeaseAction, String xMsLeaseId, String filesystem, String path, Integer xMsLeaseDuration, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-lease-duration" to
   *                           create a new file lease.  Use "renew" and specify the "leaseId" to renew an existing lease.  Use "release" and specify the
   *                           "leaseId" to release a lease.
   * @param xMsLeaseId         The lease ID must be specified.  For the acquire action, this is the proposed ID for the new lease.  For the renew and release
   *                          actions, this must match the current lease ID.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> leasePathWithServiceResponseAsync(String xMsLeaseAction, String xMsLeaseId, String
      filesystem, String path, Integer xMsLeaseDuration, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the InputStream object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  InputStream readPath(String filesystem, String path);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<InputStream> readPathAsync(String filesystem, String path, final ServiceCallback<InputStream> serviceCallback);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<InputStream> readPathAsync(String filesystem, String path);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> readPathWithServiceResponseAsync(String filesystem, String path);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the InputStream object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  InputStream readPath(String filesystem, String path, String range, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<InputStream> readPathAsync(String filesystem, String path, String range, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate, final ServiceCallback<InputStream> serviceCallback);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<InputStream> readPathAsync(String filesystem, String path, String range, String xMsClientRequestId, Integer timeout, String authorization,
      String xMsDate);

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> readPathWithServiceResponseAsync(String filesystem, String path, String range, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void getPathProperties(String filesystem, String path);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> getPathPropertiesAsync(String filesystem, String path, final ServiceCallback<Void> serviceCallback);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> getPathPropertiesAsync(String filesystem, String path);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> getPathPropertiesWithServiceResponseAsync(String filesystem, String path);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void getPathProperties(String filesystem, String path, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> getPathPropertiesAsync(String filesystem, String path, String xMsClientRequestId, Integer timeout, String authorization, String
      xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> getPathPropertiesAsync(String filesystem, String path, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> getPathPropertiesWithServiceResponseAsync(String filesystem, String path, String
      xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void deletePath(String resource, String filesystem, String path);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource        The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> deletePathAsync(String resource, String filesystem, String path, final ServiceCallback<Void> serviceCallback);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> deletePathAsync(String resource, String filesystem, String path);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> deletePathWithServiceResponseAsync(String resource, String filesystem, String path);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  void deletePath(String resource, String filesystem, String path, Boolean recursive, String xMsLeaseId, String xMsClientRequestId, Integer timeout, String
      authorization, String xMsDate);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  ServiceFuture<Void> deletePathAsync(String resource, String filesystem, String path, Boolean recursive, String xMsLeaseId, String xMsClientRequestId,
      Integer timeout, String authorization, String xMsDate, final ServiceCallback<Void> serviceCallback);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<Void> deletePathAsync(String resource, String filesystem, String path, Boolean recursive, String xMsLeaseId, String xMsClientRequestId, Integer
      timeout, String authorization, String xMsDate);

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param authorization      Specifies the authentication scheme, account name, and signature. This is required when using shared key authorization.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> deletePathWithServiceResponseAsync(String resource, String filesystem, String path, Boolean
      recursive, String xMsLeaseId, String xMsClientRequestId, Integer timeout, String authorization, String xMsDate);

}