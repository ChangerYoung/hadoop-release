/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.dfs.rest.client.generated.implementation;

import java.io.IOException;
import java.io.InputStream;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.dfs.rest.client.generated.AzureDistributedFileSystemRestClient;
import com.microsoft.azure.dfs.rest.client.generated.models.CreateFilesystemHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.CreatePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.DeleteFilesystemHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.DeletePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ErrorSchemaException;
import com.microsoft.azure.dfs.rest.client.generated.models.GetFilesystemPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.GetPathPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.LeasePathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ListPathsHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.ListSchema;
import com.microsoft.azure.dfs.rest.client.generated.models.ReadPathHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.SetFilesystemPropertiesHeaders;
import com.microsoft.azure.dfs.rest.client.generated.models.UpdatePathHeaders;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import okio.BufferedSink;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Streaming;
import rx.Observable;
import rx.functions.Func1;

import org.apache.hadoop.classification.InterfaceStability;
import org.apache.hadoop.io.IOUtils;

/**
 * Initializes a new instance of the AzureDistributedFileSystemRestClient class.
 */
@InterfaceStability.Evolving
public class AzureDistributedFileSystemRestClientImpl extends ServiceClient implements AzureDistributedFileSystemRestClient {
  /**
   * The Retrofit service to perform REST calls.
   */
  private AzureDistributedFileSystemRestClientService service;

  /**
   * Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization.
   */
  private String xMsVersion;

  /**
   * Initializes an instance of AzureDistributedFileSystemRestClient client.
   */
  public AzureDistributedFileSystemRestClientImpl() {
    this("http://account.dfs.core.windows.net");
  }

  /**
   * Initializes an instance of AzureDistributedFileSystemRestClient client.
   *
   * @param baseUrl the base URL of the host
   */
  public AzureDistributedFileSystemRestClientImpl(String baseUrl) {
    super(baseUrl);
    initialize();
  }

  /**
   * Initializes an instance of AzureDistributedFileSystemRestClient client.
   *
   * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
   * @param restBuilder   the builder for building an Retrofit client, bundled with user configurations
   */
  public AzureDistributedFileSystemRestClientImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
    this("http://account.dfs.core.windows.net", clientBuilder, restBuilder);
    initialize();
  }

  /**
   * Initializes an instance of AzureDistributedFileSystemRestClient client.
   *
   * @param baseUrl       the base URL of the host
   * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
   * @param restBuilder   the builder for building an Retrofit client, bundled with user configurations
   */
  public AzureDistributedFileSystemRestClientImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
    super(baseUrl, clientBuilder, restBuilder);
    initialize();
  }

  /**
   * Initializes an instance of AzureDistributedFileSystemRestClient client.
   *
   * @param restClient the REST client containing pre-configured settings
   */
  public AzureDistributedFileSystemRestClientImpl(RestClient restClient) {
    super(restClient);
    initialize();
  }

  /**
   * Gets Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization.
   *
   * @return the xMsVersion value.
   */
  public String xMsVersion() {
    return this.xMsVersion;
  }

  /**
   * Sets Specifies the version of the REST protocol used for processing the request. This is required when using shared key authorization.
   *
   * @param xMsVersion the xMsVersion value.
   * @return the service client itself
   */
  public AzureDistributedFileSystemRestClientImpl withXMsVersion(String xMsVersion) {
    this.xMsVersion = xMsVersion;
    return this;
  }

  private void initialize() {
    initializeService();
  }

  private void initializeService() {
    service = retrofit().create(AzureDistributedFileSystemRestClientService.class);
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void createFilesystem(String filesystem, String resource) {
    createFilesystemWithServiceResponseAsync(filesystem, resource).toBlocking().single().body();
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                        the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                        and 63 characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> createFilesystemAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(createFilesystemWithServiceResponseAsync(filesystem, resource), serviceCallback);
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> createFilesystemAsync(String filesystem, String resource) {
    return createFilesystemWithServiceResponseAsync(filesystem, resource).map(new Func1<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, CreateFilesystemHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> createFilesystemWithServiceResponseAsync(String filesystem, String resource) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    final String xMsProperties = null;
    final String xMsOriginationId = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.createFilesystem(filesystem, xMsProperties, xMsOriginationId, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, CreateFilesystemHeaders> clientResponse = createFilesystemDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void createFilesystem(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String xMsClientRequestId, Integer
      timeout, String xMsDate) {
    createFilesystemWithServiceResponseAsync(filesystem, resource, xMsProperties, xMsOriginationId, xMsClientRequestId, timeout, xMsDate).toBlocking()
        .single().body();
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> createFilesystemAsync(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String
      xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(createFilesystemWithServiceResponseAsync(filesystem, resource, xMsProperties, xMsOriginationId,
        xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> createFilesystemAsync(String filesystem, String resource, String xMsProperties, String xMsOriginationId, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    return createFilesystemWithServiceResponseAsync(filesystem, resource, xMsProperties, xMsOriginationId, xMsClientRequestId, timeout, xMsDate).map(
        new Func1<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>, Void>() {
          @Override
          public Void call(ServiceResponseWithHeaders<Void, CreateFilesystemHeaders> response) {
            return response.body();
          }
        });
  }

  /**
   * Create Filesystem.
   * Create a filesystem rooted at the specified location. If the filesystem already exists, the operation fails.  This operation does not support
   * conditional HTTP requests.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId   A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> createFilesystemWithServiceResponseAsync(String filesystem, String resource,
      String xMsProperties, String xMsOriginationId, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    return service.createFilesystem(filesystem, xMsProperties, xMsOriginationId, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, CreateFilesystemHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, CreateFilesystemHeaders> clientResponse = createFilesystemDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, CreateFilesystemHeaders> createFilesystemDelegate(Response<ResponseBody> response) throws ErrorSchemaException,
      IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(201, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, CreateFilesystemHeaders.class);
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void setFilesystemProperties(String filesystem, String resource) {
    setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource).toBlocking().single().body();
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                        the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                        and 63 characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> setFilesystemPropertiesAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource), serviceCallback);
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> setFilesystemPropertiesAsync(String filesystem, String resource) {
    return setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource).map(new Func1<ServiceResponseWithHeaders<Void,
        SetFilesystemPropertiesHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> setFilesystemPropertiesWithServiceResponseAsync(String filesystem,
      String resource) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    final String xMsProperties = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.setFilesystemProperties(filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate,
        this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders> clientResponse = setFilesystemPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                          list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not
   *                          included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing
   *                          properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and
   *                          include values for all properties.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void setFilesystemProperties(String filesystem, String resource, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsProperties, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout,
        xMsDate).toBlocking().single().body();
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                          list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not included
   *                          in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties,
   *                          first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values
   *                          for all properties.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> setFilesystemPropertiesAsync(String filesystem, String resource, String xMsProperties, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsProperties, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                          list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not
   *                          included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing
   *                          properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and
   *                          include values for all properties.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> setFilesystemPropertiesAsync(String filesystem, String resource, String xMsProperties, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return setFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsProperties, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId,
        timeout, xMsDate).map(new Func1<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Set Filesystem Properties.
   * Set properties for the filesystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for
   * Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsProperties      Optional.  Valid only when using the "Set Properties" operations or the "Flush Data" operation for files.  A comma-separated
   *                          list of properties (n1=v1,n2=v2,...) to be associated with the resource.  If the resource exists, any properties not
   *                          included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing
   *                          properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and
   *                          include values for all properties.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> setFilesystemPropertiesWithServiceResponseAsync(String filesystem,
      String resource, String xMsProperties, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    return service.setFilesystemProperties(filesystem, xMsProperties, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate,
        this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders> clientResponse = setFilesystemPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, SetFilesystemPropertiesHeaders> setFilesystemPropertiesDelegate(Response<ResponseBody> response) throws
      ErrorSchemaException, IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, SetFilesystemPropertiesHeaders.class);
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is specified, the
   *                   list will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the ListSchema object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public ListSchema listPaths(boolean recursive, String filesystem, String resource) {
    return listPathsWithServiceResponseAsync(recursive, filesystem, resource).toBlocking().single().body();
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive       If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is specified,
   *                        the list will only include paths that share the same root.
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                        the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                        and 63 characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, final ServiceCallback<ListSchema> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(listPathsWithServiceResponseAsync(recursive, filesystem, resource), serviceCallback);
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is specified, the
   *                   list will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource) {
    return listPathsWithServiceResponseAsync(recursive, filesystem, resource).map(new Func1<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>,
        ListSchema>() {
      @Override
      public ListSchema call(ServiceResponseWithHeaders<ListSchema, ListPathsHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive  If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is specified, the
   *                   list will only include paths that share the same root.
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> listPathsWithServiceResponseAsync(boolean recursive, String filesystem,
      String resource) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    final String directory = null;
    final String continuation = null;
    final Integer maxResults = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.listPaths(filesystem, directory, recursive, continuation, maxResults, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<ListSchema, ListPathsHeaders> clientResponse = listPathsDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is
   *                           specified, the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param directory          Filters results to paths within the specified directory. An error occurs if the directory does not exist.
   * @param continuation       The number of paths returned with each invocation is limited. If the  number of paths to be returned exceeds this limit, a
   *                           continuation token  is returned in the response header x-ms-continuation. When a continuation  token is returned in the
   *                           response, it must be specified in a subsequent  invocation of the list operation to continue listing the paths."
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the ListSchema object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public ListSchema listPaths(boolean recursive, String filesystem, String resource, String directory, String continuation, Integer maxResults, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    return listPathsWithServiceResponseAsync(recursive, filesystem, resource, directory, continuation, maxResults, xMsClientRequestId, timeout, xMsDate)
        .toBlocking().single().body();
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is
   *                           specified, the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param directory          Filters results to paths within the specified directory. An error occurs if the directory does not exist.
   * @param continuation       The number of paths returned with each invocation is limited. If the  number of paths to be returned exceeds this limit, a
   *                           continuation token  is returned in the response header x-ms-continuation. When a continuation  token is returned in the
   *                           response, it must be specified in a subsequent  invocation of the list operation to continue listing the paths."
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, String directory, String continuation, Integer
      maxResults, String xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<ListSchema> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(listPathsWithServiceResponseAsync(recursive, filesystem, resource, directory, continuation, maxResults,
        xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is
   *                           specified, the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param directory          Filters results to paths within the specified directory. An error occurs if the directory does not exist.
   * @param continuation       The number of paths returned with each invocation is limited. If the  number of paths to be returned exceeds this limit, a
   *                           continuation token  is returned in the response header x-ms-continuation. When a continuation  token is returned in the
   *                           response, it must be specified in a subsequent  invocation of the list operation to continue listing the paths."
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ListSchema> listPathsAsync(boolean recursive, String filesystem, String resource, String directory, String continuation, Integer
      maxResults, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return listPathsWithServiceResponseAsync(recursive, filesystem, resource, directory, continuation, maxResults, xMsClientRequestId, timeout, xMsDate)
        .map(new Func1<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>, ListSchema>() {
          @Override
          public ListSchema call(ServiceResponseWithHeaders<ListSchema, ListPathsHeaders> response) {
            return response.body();
          }
        });
  }

  /**
   * List Paths.
   * List filesystem paths and their properties.
   *
   * @param recursive          If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.  If "directory" is
   *                           specified, the list will only include paths that share the same root.
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param directory          Filters results to paths within the specified directory. An error occurs if the directory does not exist.
   * @param continuation       The number of paths returned with each invocation is limited. If the  number of paths to be returned exceeds this limit, a
   *                           continuation token  is returned in the response header x-ms-continuation. When a continuation  token is returned in the
   *                           response, it must be specified in a subsequent  invocation of the list operation to continue listing the paths."
   * @param maxResults         An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will
   *                           include up to 5,000 items.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the ListSchema object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> listPathsWithServiceResponseAsync(boolean recursive, String filesystem,
      String resource, String directory, String continuation, Integer maxResults, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    return service.listPaths(filesystem, directory, recursive, continuation, maxResults, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<ListSchema, ListPathsHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<ListSchema, ListPathsHeaders> clientResponse = listPathsDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<ListSchema, ListPathsHeaders> listPathsDelegate(Response<ResponseBody> response) throws ErrorSchemaException,
      IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<ListSchema, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<ListSchema>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, ListPathsHeaders.class);
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void getFilesystemProperties(String filesystem, String resource) {
    getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource).toBlocking().single().body();
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                        the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                        and 63 characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> getFilesystemPropertiesAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource), serviceCallback);
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> getFilesystemPropertiesAsync(String filesystem, String resource) {
    return getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource).map(new Func1<ServiceResponseWithHeaders<Void,
        GetFilesystemPropertiesHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> getFilesystemPropertiesWithServiceResponseAsync(String filesystem,
      String resource) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.getFilesystemProperties(filesystem, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> call(Response<Void> response) {
            try {
              ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders> clientResponse = getFilesystemPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void getFilesystemProperties(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String xMsDate) {
    getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsClientRequestId, timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> getFilesystemPropertiesAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String xMsDate,
      final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsClientRequestId, timeout, xMsDate),
        serviceCallback);
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> getFilesystemPropertiesAsync(String filesystem, String resource, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return getFilesystemPropertiesWithServiceResponseAsync(filesystem, resource, xMsClientRequestId, timeout, xMsDate).map(
        new Func1<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>, Void>() {
          @Override
          public Void call(ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders> response) {
            return response
                .body();
          }
        });
  }

  /**
   * Get Filesystem Properties.
   * All system and user-defined filesystem properties are specified in the response headers.
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> getFilesystemPropertiesWithServiceResponseAsync(String filesystem,
      String resource, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    return service.getFilesystemProperties(filesystem, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders>> call(Response<Void> response) {
            try {
              ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders> clientResponse = getFilesystemPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, GetFilesystemPropertiesHeaders> getFilesystemPropertiesDelegate(Response<Void> response) throws
      ErrorSchemaException, IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildEmptyWithHeaders(response, GetFilesystemPropertiesHeaders.class);
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void deleteFilesystem(String filesystem, String resource) {
    deleteFilesystemWithServiceResponseAsync(filesystem, resource).toBlocking().single().body();
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                        the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                        and 63 characters.
   * @param resource        The value must be "filesystem" for all filesystem operations.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> deleteFilesystemAsync(String filesystem, String resource, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(deleteFilesystemWithServiceResponseAsync(filesystem, resource), serviceCallback);
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> deleteFilesystemAsync(String filesystem, String resource) {
    return deleteFilesystemWithServiceResponseAsync(filesystem, resource).map(new Func1<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and the
   *                   dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3 and 63
   *                   characters.
   * @param resource   The value must be "filesystem" for all filesystem operations.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> deleteFilesystemWithServiceResponseAsync(String filesystem, String resource) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.deleteFilesystem(filesystem, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders> clientResponse = deleteFilesystemDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void deleteFilesystem(String filesystem, String resource, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer
      timeout, String xMsDate) {
    deleteFilesystemWithServiceResponseAsync(filesystem, resource, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).toBlocking()
        .single().body();
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between 3
   *                          and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> deleteFilesystemAsync(String filesystem, String resource, String ifModifiedSince, String ifUnmodifiedSince, String
      xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(deleteFilesystemWithServiceResponseAsync(filesystem, resource, ifModifiedSince, ifUnmodifiedSince,
        xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> deleteFilesystemAsync(String filesystem, String resource, String ifModifiedSince, String ifUnmodifiedSince, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    return deleteFilesystemWithServiceResponseAsync(filesystem, resource, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate)
        .map(new Func1<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>, Void>() {
          @Override
          public Void call(ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders> response) {
            return response.body();
          }
        });
  }

  /**
   * Delete Filesystem.
   * Marks the filesystem for deletion.  When a filesystem is deleted, a filesystem with the same identifier cannot be created for at least 30 seconds.
   * While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the
   * service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any
   * files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.  The value must start and end with a letter or number and must contain only letters, numbers, and
   *                          the dash (-) character.  Consecutive dashes are not permitted.  All letters must be lowercase.  The value must have between
   *                          3 and 63 characters.
   * @param resource           The value must be "filesystem" for all filesystem operations.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> deleteFilesystemWithServiceResponseAsync(String filesystem, String resource,
      String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    return service.deleteFilesystem(filesystem, ifModifiedSince, ifUnmodifiedSince, resource, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders> clientResponse = deleteFilesystemDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, DeleteFilesystemHeaders> deleteFilesystemDelegate(Response<ResponseBody> response) throws ErrorSchemaException,
      IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(202, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, DeleteFilesystemHeaders.class);
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void createPath(String resource, String filesystem, String path) {
    createPathWithServiceResponseAsync(resource, filesystem, path).toBlocking().single().body();
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource        The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> createPathAsync(String resource, String filesystem, String path, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(createPathWithServiceResponseAsync(resource, filesystem, path), serviceCallback);
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> createPathAsync(String resource, String filesystem, String path) {
    return createPathWithServiceResponseAsync(resource, filesystem, path).map(new Func1<ServiceResponseWithHeaders<Void, CreatePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, CreatePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> createPathWithServiceResponseAsync(String resource, String filesystem, String path) {
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final String continuation = null;
    final String contentLength = null;
    final String contentEncoding = null;
    final String contentLanguage = null;
    final String contentMD5 = null;
    final String xMsCacheControl = null;
    final String xMsContentType = null;
    final String xMsContentEncoding = null;
    final String xMsContentLanguage = null;
    final String xMsContentMd5 = null;
    final String xMsRenameSource = null;
    final String xMsLeaseAction = null;
    final String xMsLeaseId = null;
    final String xMsProposedLeaseId = null;
    final String xMsSourceLeaseAction = null;
    final String xMsSourceLeaseId = null;
    final String xMsProperties = null;
    final String xMsOriginationId = null;
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsSourceIfMatch = null;
    final String xMsSourceIfNoneMatch = null;
    final String xMsSourceIfModifiedSince = null;
    final String xMsSourceIfUnmodifiedSince = null;
    final byte[] requestBody = new byte[0];
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    RequestBody requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), new byte[0]);
    if (requestBody != null) {
      requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), requestBody);
    }
    return service.createPath(filesystem, path, resource, continuation, contentLength, contentEncoding, contentLanguage, contentMD5, xMsCacheControl,
        xMsContentType, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsRenameSource, xMsLeaseAction, xMsLeaseId, xMsProposedLeaseId,
        xMsSourceLeaseAction, xMsSourceLeaseId, xMsProperties, xMsOriginationId, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsSourceIfMatch,
        xMsSourceIfNoneMatch, xMsSourceIfModifiedSince, xMsSourceIfUnmodifiedSince, requestBodyConverted, xMsClientRequestId, timeout, xMsDate, this
            .xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, CreatePathHeaders> clientResponse = createPathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource                   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem                 The filesystem identifier.
   * @param path                       The file or directory path.
   * @param continuation               Optional.  When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the
   *                                   number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a
   *                                   continuation token is returned in the response, it must be specified in a subsequent invocation of the rename
   *                                   operation to continue renaming the directory.
   * @param contentLength              Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater
   *                                   than 0 and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentEncoding            Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client
   *                                   when the "Read File" operation is performed.
   * @param contentLanguage            Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5                 Optional.  An MD5 hash of the resource content. This hash is used to verify the integrity of the resource during
   *                                   transport. When this header is specified, the storage service validates the hash. If the two hashes do not match,
   *                                   the operation will fail with error code 400 (Bad Request).
   * @param xMsCacheControl            Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File"
   *                                   operations.
   * @param xMsContentType             Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File"
   *                                   operations.
   * @param xMsContentEncoding         Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File"
   *                                   operations.
   * @param xMsContentLanguage         Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File"
   *                                   operations.
   * @param xMsContentMd5              Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File"
   *                                   operations.
   * @param xMsRenameSource            An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".
   *                                   If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing
   *                                   properties will be preserved.
   * @param xMsLeaseAction             Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The
   *                                   lease ID is returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId                 Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and
   *                                   the lease ID must match.
   * @param xMsProposedLeaseId         Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the
   *                                   proposed ID when the resource is created.
   * @param xMsSourceLeaseAction       Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the
   *                                   rename operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId           Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the
   *                                   lease ID must match.
   * @param xMsProperties              A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId           A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param ifMatch                    Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                                  specified. The ETag must be specified in quotes.
   * @param ifNoneMatch                Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if
   *                                   the resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince            Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified
   *                                  since the specified date and time.
   * @param ifUnmodifiedSince          Optional. A date and time value. Specify this header to perform the operation only if the resource has not been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfMatch           Optional.  An ETag value. Specify this header to perform the rename operation only if the source's ETag matches the
   *                                   value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfNoneMatch       Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the rename operation
   *                                   only if the source's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfModifiedSince   Optional. A date and time value. Specify this header to perform the rename operation only if the source has been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfUnmodifiedSince Optional. A date and time value. Specify this header to perform the rename operation only if the soruce has not been
   *                                  modified since the specified date and time.
   * @param requestBody                Optional.  The content of the file to be created.
   * @param xMsClientRequestId         A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout                    An optional operation timeout value in seconds. The period begins when the request is received by the service. If
   *                                   the timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate                    Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void createPath(String resource, String filesystem, String path, String continuation, String contentLength, String contentEncoding, String
      contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String
      xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String xMsSourceLeaseAction, String
      xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince,
      String xMsSourceIfMatch, String xMsSourceIfNoneMatch, String xMsSourceIfModifiedSince, String xMsSourceIfUnmodifiedSince, InputStream requestBody,
      String xMsClientRequestId, Integer timeout, String xMsDate) {
    createPathWithServiceResponseAsync(resource, filesystem, path, continuation, contentLength, contentEncoding, contentLanguage, contentMD5,
        xMsCacheControl, xMsContentType, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsRenameSource, xMsLeaseAction, xMsLeaseId,
        xMsProposedLeaseId, xMsSourceLeaseAction, xMsSourceLeaseId, xMsProperties, xMsOriginationId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsSourceIfMatch, xMsSourceIfNoneMatch, xMsSourceIfModifiedSince, xMsSourceIfUnmodifiedSince, requestBody, xMsClientRequestId,
        timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource                   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem                 The filesystem identifier.
   * @param path                       The file or directory path.
   * @param continuation               Optional.  When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the
   *                                   number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a
   *                                   continuation token is returned in the response, it must be specified in a subsequent invocation of the rename
   *                                   operation to continue renaming the directory.
   * @param contentLength              Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater
   *                                   than 0 and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentEncoding            Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client
   *                                   when the "Read File" operation is performed.
   * @param contentLanguage            Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5                 Optional.  An MD5 hash of the resource content. This hash is used to verify the integrity of the resource during
   *                                   transport. When this header is specified, the storage service validates the hash. If the two hashes do not match,
   *                                   the operation will fail with error code 400 (Bad Request).
   * @param xMsCacheControl            Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File"
   *                                   operations.
   * @param xMsContentType             Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File"
   *                                   operations.
   * @param xMsContentEncoding         Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File"
   *                                   operations.
   * @param xMsContentLanguage         Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File"
   *                                   operations.
   * @param xMsContentMd5              Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File"
   *                                   operations.
   * @param xMsRenameSource            An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".
   *                                   If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing
   *                                   properties will be preserved.
   * @param xMsLeaseAction             Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The
   *                                   lease ID is returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId                 Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and
   *                                   the lease ID must match.
   * @param xMsProposedLeaseId         Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the
   *                                   proposed ID when the resource is created.
   * @param xMsSourceLeaseAction       Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the
   *                                   rename operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId           Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the
   *                                   lease ID must match.
   * @param xMsProperties              A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId           A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param ifMatch                    Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                                  specified. The ETag must be specified in quotes.
   * @param ifNoneMatch                Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if
   *                                   the resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince            Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified
   *                                  since the specified date and time.
   * @param ifUnmodifiedSince          Optional. A date and time value. Specify this header to perform the operation only if the resource has not been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfMatch           Optional.  An ETag value. Specify this header to perform the rename operation only if the source's ETag matches the
   *                                   value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfNoneMatch       Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the rename operation
   *                                   only if the source's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfModifiedSince   Optional. A date and time value. Specify this header to perform the rename operation only if the source has been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfUnmodifiedSince Optional. A date and time value. Specify this header to perform the rename operation only if the soruce has not been
   *                                  modified since the specified date and time.
   * @param requestBody                Optional.  The content of the file to be created.
   * @param xMsClientRequestId         A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout                    An optional operation timeout value in seconds. The period begins when the request is received by the service. If
   *                                   the timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate                    Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback            the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> createPathAsync(String resource, String filesystem, String path, String continuation, String contentLength, String
      contentEncoding, String contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String
      xMsContentLanguage, String xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String
      xMsSourceLeaseAction, String xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, String ifMatch, String ifNoneMatch, String
      ifModifiedSince,
      String ifUnmodifiedSince, String xMsSourceIfMatch, String xMsSourceIfNoneMatch, String xMsSourceIfModifiedSince, String xMsSourceIfUnmodifiedSince,
      InputStream requestBody, String xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(createPathWithServiceResponseAsync(resource, filesystem, path, continuation, contentLength, contentEncoding,
        contentLanguage, contentMD5, xMsCacheControl, xMsContentType, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsRenameSource,
        xMsLeaseAction,
        xMsLeaseId, xMsProposedLeaseId, xMsSourceLeaseAction, xMsSourceLeaseId, xMsProperties, xMsOriginationId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsSourceIfMatch, xMsSourceIfNoneMatch, xMsSourceIfModifiedSince, xMsSourceIfUnmodifiedSince, requestBody, xMsClientRequestId,
        timeout, xMsDate), serviceCallback);
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource                   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem                 The filesystem identifier.
   * @param path                       The file or directory path.
   * @param continuation               Optional.  When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the
   *                                   number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a
   *                                   continuation token is returned in the response, it must be specified in a subsequent invocation of the rename
   *                                   operation to continue renaming the directory.
   * @param contentLength              Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater
   *                                   than 0 and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentEncoding            Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client
   *                                   when the "Read File" operation is performed.
   * @param contentLanguage            Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5                 Optional.  An MD5 hash of the resource content. This hash is used to verify the integrity of the resource during
   *                                   transport. When this header is specified, the storage service validates the hash. If the two hashes do not match,
   *                                   the operation will fail with error code 400 (Bad Request).
   * @param xMsCacheControl            Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File"
   *                                   operations.
   * @param xMsContentType             Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File"
   *                                   operations.
   * @param xMsContentEncoding         Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File"
   *                                   operations.
   * @param xMsContentLanguage         Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File"
   *                                   operations.
   * @param xMsContentMd5              Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File"
   *                                   operations.
   * @param xMsRenameSource            An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".
   *                                   If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing
   *                                   properties will be preserved.
   * @param xMsLeaseAction             Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The
   *                                   lease ID is returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId                 Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and
   *                                   the lease ID must match.
   * @param xMsProposedLeaseId         Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the
   *                                   proposed ID when the resource is created.
   * @param xMsSourceLeaseAction       Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the
   *                                   rename operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId           Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the
   *                                   lease ID must match.
   * @param xMsProperties              A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId           A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param ifMatch                    Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                                  specified. The ETag must be specified in quotes.
   * @param ifNoneMatch                Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if
   *                                   the resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince            Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified
   *                                  since the specified date and time.
   * @param ifUnmodifiedSince          Optional. A date and time value. Specify this header to perform the operation only if the resource has not been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfMatch           Optional.  An ETag value. Specify this header to perform the rename operation only if the source's ETag matches the
   *                                   value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfNoneMatch       Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the rename operation
   *                                   only if the source's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfModifiedSince   Optional. A date and time value. Specify this header to perform the rename operation only if the source has been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfUnmodifiedSince Optional. A date and time value. Specify this header to perform the rename operation only if the soruce has not been
   *                                  modified since the specified date and time.
   * @param requestBody                Optional.  The content of the file to be created.
   * @param xMsClientRequestId         A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout                    An optional operation timeout value in seconds. The period begins when the request is received by the service. If
   *                                   the timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate                    Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> createPathAsync(String resource, String filesystem, String path, String continuation, String contentLength, String
      contentEncoding, String contentLanguage, String contentMD5, String xMsCacheControl, String xMsContentType, String xMsContentEncoding, String
      xMsContentLanguage, String xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String xMsLeaseId, String xMsProposedLeaseId, String
      xMsSourceLeaseAction, String xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, String ifMatch, String ifNoneMatch, String
      ifModifiedSince,
      String ifUnmodifiedSince, String xMsSourceIfMatch, String xMsSourceIfNoneMatch, String xMsSourceIfModifiedSince, String xMsSourceIfUnmodifiedSince,
      InputStream requestBody, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return createPathWithServiceResponseAsync(resource, filesystem, path, continuation, contentLength, contentEncoding, contentLanguage, contentMD5,
        xMsCacheControl, xMsContentType, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsRenameSource, xMsLeaseAction, xMsLeaseId,
        xMsProposedLeaseId, xMsSourceLeaseAction, xMsSourceLeaseId, xMsProperties, xMsOriginationId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsSourceIfMatch, xMsSourceIfNoneMatch, xMsSourceIfModifiedSince, xMsSourceIfUnmodifiedSince, requestBody, xMsClientRequestId,
        timeout, xMsDate).map(new Func1<ServiceResponseWithHeaders<Void, CreatePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, CreatePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Create File | Create Directory | Rename File | Rename Directory.
   * Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is
   * broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations]
   * (https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination
   * already exists, use a conditional request with If-Nome-Match: "*".
   *
   * @param resource                   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem                 The filesystem identifier.
   * @param path                       The file or directory path.
   * @param continuation               Optional.  When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the
   *                                   number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a
   *                                   continuation token is returned in the response, it must be specified in a subsequent invocation of the rename
   *                                   operation to continue renaming the directory.
   * @param contentLength              Required for "Create File" and "Create Directory".  Must be 0 to create a directory or empty file.  Must be greater
   *                                   than 0 and less than or equal to 268,435,456 (256 MB) to create a file with content.
   * @param contentEncoding            Optional.  Specifies which content encodings have been applied to the file. This value is returned to the client
   *                                   when the "Read File" operation is performed.
   * @param contentLanguage            Optional.  Specifies the natural language used by the intended audience for the file.
   * @param contentMD5                 Optional.  An MD5 hash of the resource content. This hash is used to verify the integrity of the resource during
   *                                   transport. When this header is specified, the storage service validates the hash. If the two hashes do not match,
   *                                   the operation will fail with error code 400 (Bad Request).
   * @param xMsCacheControl            Optional.  The service stores this value and includes it in the "Cache-Control" response header for "Read File"
   *                                   operations.
   * @param xMsContentType             Optional.  The service stores this value and includes it in the "Content-Type" response header for "Read File"
   *                                   operations.
   * @param xMsContentEncoding         Optional.  The service stores this value and includes it in the "Content-Encoding" response header for "Read File"
   *                                   operations.
   * @param xMsContentLanguage         Optional.  The service stores this value and includes it in the "Content-Language" response header for "Read File"
   *                                   operations.
   * @param xMsContentMd5              Optional.  The service stores this value and includes it in the "Content-MD5" response header for "Read File"
   *                                   operations.
   * @param xMsRenameSource            An optional file or directory to be renamed.  The value must have the following format: "/{filesysystem}/{path}".
   *                                   If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing
   *                                   properties will be preserved.
   * @param xMsLeaseAction             Optional for create operations.  The value must be "acquire" to acquire a lease on the path after creation.  The
   *                                   lease ID is returned in the response headers and can be used with append and flush operations.
   * @param xMsLeaseId                 Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have an active lease and
   *                                   the lease ID must match.
   * @param xMsProposedLeaseId         Optional for create operations.  Required when "x-ms-lease-action" is used.  A lease will be acquired using the
   *                                   proposed ID when the resource is created.
   * @param xMsSourceLeaseAction       Optional for rename operations.  The value must be "acquire" to acquire a lease on the source before beginning the
   *                                   rename operation.  The lease is released when the rename operation completes.
   * @param xMsSourceLeaseId           Optional for rename operations.  A lease ID for the source path.  The source path must have an active lease and the
   *                                   lease ID must match.
   * @param xMsProperties              A comma-separated list of properties n1=v1,n2=v2,... to be associated with the resource.
   * @param xMsOriginationId           A UUID persisted with the resource upon creation and used to identify the request that created it.
   * @param ifMatch                    Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                                  specified. The ETag must be specified in quotes.
   * @param ifNoneMatch                Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if
   *                                   the resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince            Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified
   *                                  since the specified date and time.
   * @param ifUnmodifiedSince          Optional. A date and time value. Specify this header to perform the operation only if the resource has not been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfMatch           Optional.  An ETag value. Specify this header to perform the rename operation only if the source's ETag matches the
   *                                   value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfNoneMatch       Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the rename operation
   *                                   only if the source's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param xMsSourceIfModifiedSince   Optional. A date and time value. Specify this header to perform the rename operation only if the source has been
   *                                   modified since the specified date and time.
   * @param xMsSourceIfUnmodifiedSince Optional. A date and time value. Specify this header to perform the rename operation only if the soruce has not been
   *                                  modified since the specified date and time.
   * @param requestBody                Optional.  The content of the file to be created.
   * @param xMsClientRequestId         A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout                    An optional operation timeout value in seconds. The period begins when the request is received by the service. If
   *                                   the timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate                    Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> createPathWithServiceResponseAsync(String resource, String filesystem, String
      path, String continuation, final String contentLength, String contentEncoding, String contentLanguage, String contentMD5, String xMsCacheControl, String
      xMsContentType, String xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsRenameSource, String xMsLeaseAction, String
      xMsLeaseId, String xMsProposedLeaseId, String xMsSourceLeaseAction, String xMsSourceLeaseId, String xMsProperties, String xMsOriginationId, String
      ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsSourceIfMatch, String xMsSourceIfNoneMatch, String
      xMsSourceIfModifiedSince, String xMsSourceIfUnmodifiedSince, final InputStream requestBody, String xMsClientRequestId, Integer timeout, String
      xMsDate) {
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    RequestBody requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), new byte[0]);
    if (requestBody != null) {
      final MediaType mediaType = MediaType.parse("application/octet-stream");
      requestBodyConverted = new RequestBody() {
        @Override
        public long contentLength() throws IOException {
          return Long.valueOf(contentLength);
        }

        @Override
        public MediaType contentType() {
          return mediaType;
        }

        @Override
        public void writeTo(BufferedSink sink) throws IOException {
          IOUtils.copyBytes(requestBody, sink.outputStream(), Integer.valueOf(contentLength));
        }
      };
    }
    return service.createPath(filesystem, path, resource, continuation, contentLength, contentEncoding, contentLanguage, contentMD5, xMsCacheControl,
        xMsContentType, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsRenameSource, xMsLeaseAction, xMsLeaseId, xMsProposedLeaseId,
        xMsSourceLeaseAction, xMsSourceLeaseId, xMsProperties, xMsOriginationId, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsSourceIfMatch,
        xMsSourceIfNoneMatch, xMsSourceIfModifiedSince, xMsSourceIfUnmodifiedSince, requestBodyConverted, xMsClientRequestId, timeout, xMsDate, this
            .xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, CreatePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, CreatePathHeaders> clientResponse = createPathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, CreatePathHeaders> createPathDelegate(Response<ResponseBody> response) throws ErrorSchemaException, IOException,
      IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(201, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, CreatePathHeaders.class);
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action     The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, or
   *                   "setProperties" to set the properties of a file or directory.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void updatePath(String action, String filesystem, String path) {
    updatePathWithServiceResponseAsync(action, filesystem, path).toBlocking().single().body();
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action          The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, or
   *                        "setProperties" to set the properties of a file or directory.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> updatePathAsync(String action, String filesystem, String path, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(updatePathWithServiceResponseAsync(action, filesystem, path), serviceCallback);
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action     The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, or
   *                   "setProperties" to set the properties of a file or directory.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> updatePathAsync(String action, String filesystem, String path) {
    return updatePathWithServiceResponseAsync(action, filesystem, path).map(new Func1<ServiceResponseWithHeaders<Void, UpdatePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, UpdatePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action     The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, or
   *                   "setProperties" to set the properties of a file or directory.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> updatePathWithServiceResponseAsync(String action, String filesystem, String path) {
    if (action == null) {
      throw new IllegalArgumentException("Parameter action is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final Long position = null;
    final Boolean retainUncommittedData = null;
    final String contentLength = null;
    final String contentMD5 = null;
    final String origin = null;
    final String xMsLeaseAction = null;
    final String xMsLeaseId = null;
    final String xMsCacheControl = null;
    final String xMsContentDisposition = null;
    final String xMsContentEncoding = null;
    final String xMsContentLanguage = null;
    final String xMsContentMd5 = null;
    final String xMsContentType = null;
    final String xMsProperties = null;
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final byte[] requestBody = new byte[0];
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    RequestBody requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), new byte[0]);
    if (requestBody != null) {
      requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), requestBody);
    }
    return service.updatePath(filesystem, path, action, position, retainUncommittedData, contentLength, contentMD5, origin, xMsLeaseAction, xMsLeaseId,
        xMsCacheControl, xMsContentDisposition, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsContentType, xMsProperties, ifMatch, ifNoneMatch,
        ifModifiedSince, ifUnmodifiedSince, requestBodyConverted, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, UpdatePathHeaders> clientResponse = updatePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action                The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file,
   *                             or "setProperties" to set the properties of a file or directory.
   * @param filesystem            The filesystem identifier.
   * @param path                  The file or directory path.
   * @param position              This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
   *                              It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
   *                              The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written,
   *                              to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
   *                              equal to the length of the file after all data has been written, and there must not be a request entity body included
   *                              with the request.
   * @param retainUncommittedData Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise,
   *                             the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the
   *                             specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush
   *                             position to be retained for a future flush operation.
   * @param contentLength         Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in
   *                              bytes for "Append Data".
   * @param contentMD5            Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param origin                Optional and only valid for set properties operations.  Specifies the origin from which the request is issued. The
   *                              presence of this header results in cross-origin resource sharing (CORS) headers on the response
   * @param xMsLeaseAction        Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param xMsLeaseId            The lease ID must be specified if there is an active lease.
   * @param xMsCacheControl       Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Cache-Control" response header for "Read File" operations.
   * @param xMsContentDisposition Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Disposition" response header for "Read File" operations.
   * @param xMsContentEncoding    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5         Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-MD5" response header for "Read File" operations.
   * @param xMsContentType        Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Type" response header for "Read File" operations.
   * @param xMsProperties         Optional and only valid for flush and set properties operations.  Valid only when using the "Set Properties" operations
   *                              or the "Flush Data" operation for files.  A comma-separated list of properties (n1=v1,n2=v2,...) to be associated with
   *                              the resource.  If the resource exists, any properties not included in the list will be removed.  All properties are
   *                              removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the
   *                              current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
   * @param ifMatch               Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value. Specify this header to perform
   *                              the operation only if the resource's ETag matches the value specified. The ETag must be specified in quotes.
   * @param ifNoneMatch           Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value or the special wildcard ("*")
   *                              value. Specify this header to perform the operation only if the resource's ETag does not match the value specified. The
   *                              ETag must be specified in quotes.
   * @param ifModifiedSince       Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has been modified since the specified date and time.
   * @param ifUnmodifiedSince     Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has not been modified since the specified date and time.
   * @param requestBody           Valid only for append operations.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId    A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout               An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                              timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate               Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void updatePath(String action, String filesystem, String path, Long position, Boolean retainUncommittedData, String contentLength, String
      contentMD5, String origin, String xMsLeaseAction, String xMsLeaseId, String xMsCacheControl, String xMsContentDisposition, String xMsContentEncoding,
      String xMsContentLanguage, String xMsContentMd5, String xMsContentType, String xMsProperties, String ifMatch, String ifNoneMatch, String
      ifModifiedSince,
      String ifUnmodifiedSince, InputStream requestBody, String xMsClientRequestId, Integer timeout, String xMsDate) {
    updatePathWithServiceResponseAsync(action, filesystem, path, position, retainUncommittedData, contentLength, contentMD5, origin, xMsLeaseAction,
        xMsLeaseId, xMsCacheControl, xMsContentDisposition, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsContentType, xMsProperties, ifMatch,
        ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, requestBody, xMsClientRequestId, timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action                The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file,
   *                             or "setProperties" to set the properties of a file or directory.
   * @param filesystem            The filesystem identifier.
   * @param path                  The file or directory path.
   * @param position              This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
   *                              It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
   *                              The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written,
   *                              to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
   *                              equal to the length of the file after all data has been written, and there must not be a request entity body included
   *                              with the request.
   * @param retainUncommittedData Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise,
   *                             the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the
   *                             specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush
   *                             position to be retained for a future flush operation.
   * @param contentLength         Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in
   *                              bytes for "Append Data".
   * @param contentMD5            Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param origin                Optional and only valid for set properties operations.  Specifies the origin from which the request is issued. The
   *                              presence of this header results in cross-origin resource sharing (CORS) headers on the response
   * @param xMsLeaseAction        Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param xMsLeaseId            The lease ID must be specified if there is an active lease.
   * @param xMsCacheControl       Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Cache-Control" response header for "Read File" operations.
   * @param xMsContentDisposition Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Disposition" response header for "Read File" operations.
   * @param xMsContentEncoding    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5         Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-MD5" response header for "Read File" operations.
   * @param xMsContentType        Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Type" response header for "Read File" operations.
   * @param xMsProperties         Optional and only valid for flush and set properties operations.  Valid only when using the "Set Properties" operations
   *                              or the "Flush Data" operation for files.  A comma-separated list of properties (n1=v1,n2=v2,...) to be associated with
   *                              the resource.  If the resource exists, any properties not included in the list will be removed.  All properties are
   *                              removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the
   *                              current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
   * @param ifMatch               Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value. Specify this header to perform
   *                              the operation only if the resource's ETag matches the value specified. The ETag must be specified in quotes.
   * @param ifNoneMatch           Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value or the special wildcard ("*")
   *                              value. Specify this header to perform the operation only if the resource's ETag does not match the value specified. The
   *                              ETag must be specified in quotes.
   * @param ifModifiedSince       Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has been modified since the specified date and time.
   * @param ifUnmodifiedSince     Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has not been modified since the specified date and time.
   * @param requestBody           Valid only for append operations.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId    A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout               An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                              timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate               Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback       the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> updatePathAsync(String action, String filesystem, String path, Long position, Boolean retainUncommittedData, String
      contentLength, String contentMD5, String origin, String xMsLeaseAction, String xMsLeaseId, String xMsCacheControl, String xMsContentDisposition, String
      xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsContentType, String xMsProperties, String ifMatch, String ifNoneMatch,
      String ifModifiedSince, String ifUnmodifiedSince, InputStream requestBody, String xMsClientRequestId, Integer timeout, String xMsDate, final
  ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(updatePathWithServiceResponseAsync(action, filesystem, path, position, retainUncommittedData, contentLength,
        contentMD5, origin, xMsLeaseAction, xMsLeaseId, xMsCacheControl, xMsContentDisposition, xMsContentEncoding, xMsContentLanguage, xMsContentMd5,
        xMsContentType, xMsProperties, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, requestBody, xMsClientRequestId, timeout, xMsDate),
        serviceCallback);
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action                The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file,
   *                             or "setProperties" to set the properties of a file or directory.
   * @param filesystem            The filesystem identifier.
   * @param path                  The file or directory path.
   * @param position              This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
   *                              It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
   *                              The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written,
   *                              to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
   *                              equal to the length of the file after all data has been written, and there must not be a request entity body included
   *                              with the request.
   * @param retainUncommittedData Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise,
   *                             the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the
   *                             specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush
   *                             position to be retained for a future flush operation.
   * @param contentLength         Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in
   *                              bytes for "Append Data".
   * @param contentMD5            Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param origin                Optional and only valid for set properties operations.  Specifies the origin from which the request is issued. The
   *                              presence of this header results in cross-origin resource sharing (CORS) headers on the response
   * @param xMsLeaseAction        Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param xMsLeaseId            The lease ID must be specified if there is an active lease.
   * @param xMsCacheControl       Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Cache-Control" response header for "Read File" operations.
   * @param xMsContentDisposition Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Disposition" response header for "Read File" operations.
   * @param xMsContentEncoding    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5         Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-MD5" response header for "Read File" operations.
   * @param xMsContentType        Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Type" response header for "Read File" operations.
   * @param xMsProperties         Optional and only valid for flush and set properties operations.  Valid only when using the "Set Properties" operations
   *                              or the "Flush Data" operation for files.  A comma-separated list of properties (n1=v1,n2=v2,...) to be associated with
   *                              the resource.  If the resource exists, any properties not included in the list will be removed.  All properties are
   *                              removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the
   *                              current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
   * @param ifMatch               Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value. Specify this header to perform
   *                              the operation only if the resource's ETag matches the value specified. The ETag must be specified in quotes.
   * @param ifNoneMatch           Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value or the special wildcard ("*")
   *                              value. Specify this header to perform the operation only if the resource's ETag does not match the value specified. The
   *                              ETag must be specified in quotes.
   * @param ifModifiedSince       Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has been modified since the specified date and time.
   * @param ifUnmodifiedSince     Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has not been modified since the specified date and time.
   * @param requestBody           Valid only for append operations.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId    A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout               An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                              timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate               Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> updatePathAsync(String action, String filesystem, String path, Long position, Boolean retainUncommittedData, String
      contentLength, String contentMD5, String origin, String xMsLeaseAction, String xMsLeaseId, String xMsCacheControl, String xMsContentDisposition, String
      xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsContentType, String xMsProperties, String ifMatch, String ifNoneMatch,
      String ifModifiedSince, String ifUnmodifiedSince, InputStream requestBody, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return updatePathWithServiceResponseAsync(action, filesystem, path, position, retainUncommittedData, contentLength, contentMD5, origin,
        xMsLeaseAction, xMsLeaseId, xMsCacheControl, xMsContentDisposition, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsContentType,
        xMsProperties, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, requestBody, xMsClientRequestId, timeout, xMsDate).map(
            new Func1<ServiceResponseWithHeaders<Void, UpdatePathHeaders>, Void>() {
              @Override
              public Void call(ServiceResponseWithHeaders<Void, UpdatePathHeaders> response) {
                return response.body();
              }
            });
  }

  /**
   * Append Data | Flush Data | Set File Properties | Set Directory Properties.
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, or sets properties for a file or directory.  Data can only
   * be appended to a file.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param action                The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file,
   *                             or "setProperties" to set the properties of a file or directory.
   * @param filesystem            The filesystem identifier.
   * @param path                  The file or directory path.
   * @param position              This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
   *                              It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
   *                              The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written,
   *                              to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
   *                              equal to the length of the file after all data has been written, and there must not be a request entity body included
   *                              with the request.
   * @param retainUncommittedData Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise,
   *                             the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the
   *                             specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush
   *                             position to be retained for a future flush operation.
   * @param contentLength         Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in
   *                              bytes for "Append Data".
   * @param contentMD5            Optional.  An MD5 hash of the request content. This hash is used to verify the integrity of the content during transport.
   * @param origin                Optional and only valid for set properties operations.  Specifies the origin from which the request is issued. The
   *                              presence of this header results in cross-origin resource sharing (CORS) headers on the response
   * @param xMsLeaseAction        Optional.  The lease action can be "renew" to renew an existing lease or "release" to release a lease.
   * @param xMsLeaseId            The lease ID must be specified if there is an active lease.
   * @param xMsCacheControl       Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Cache-Control" response header for "Read File" operations.
   * @param xMsContentDisposition Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Disposition" response header for "Read File" operations.
   * @param xMsContentEncoding    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Encoding" response header for "Read File" operations.
   * @param xMsContentLanguage    Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Language" response header for "Read File" operations.
   * @param xMsContentMd5         Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-MD5" response header for "Read File" operations.
   * @param xMsContentType        Optional and only valid for flush and set properties operations.  The service stores this value and includes it in the
   *                              "Content-Type" response header for "Read File" operations.
   * @param xMsProperties         Optional and only valid for flush and set properties operations.  Valid only when using the "Set Properties" operations
   *                              or the "Flush Data" operation for files.  A comma-separated list of properties (n1=v1,n2=v2,...) to be associated with
   *                              the resource.  If the resource exists, any properties not included in the list will be removed.  All properties are
   *                              removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the
   *                              current E-Tag, then make a conditional request with the E-Tag and include values for all properties.
   * @param ifMatch               Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value. Specify this header to perform
   *                              the operation only if the resource's ETag matches the value specified. The ETag must be specified in quotes.
   * @param ifNoneMatch           Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value or the special wildcard ("*")
   *                              value. Specify this header to perform the operation only if the resource's ETag does not match the value specified. The
   *                              ETag must be specified in quotes.
   * @param ifModifiedSince       Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has been modified since the specified date and time.
   * @param ifUnmodifiedSince     Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time value. Specify this header to
   *                              perform the operation only if the resource has not been modified since the specified date and time.
   * @param requestBody           Valid only for append operations.  The data to be uploaded and appended to the file.
   * @param xMsClientRequestId    A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout               An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                              timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate               Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> updatePathWithServiceResponseAsync(String action, String filesystem, String path,
      Long position, Boolean retainUncommittedData, final String contentLength, String contentMD5, String origin, String xMsLeaseAction, String xMsLeaseId,
      String xMsCacheControl, String xMsContentDisposition, String xMsContentEncoding, String xMsContentLanguage, String xMsContentMd5, String xMsContentType,
      String xMsProperties, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, final InputStream requestBody, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    if (action == null) {
      throw new IllegalArgumentException("Parameter action is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    RequestBody requestBodyConverted = RequestBody.create(MediaType.parse("application/octet-stream"), new byte[0]);
    if (requestBody != null) {
      final MediaType mediaType = MediaType.parse("application/octet-stream");
      requestBodyConverted = new RequestBody() {
        @Override
        public long contentLength() throws IOException {
          return Long.valueOf(contentLength);
        }

        @Override
        public MediaType contentType() {
          return mediaType;
        }

        @Override
        public void writeTo(BufferedSink sink) throws IOException {
          IOUtils.copyBytes(requestBody, sink.outputStream(), Integer.valueOf(contentLength));
        }
      };
    }
    return service.updatePath(filesystem, path, action, position, retainUncommittedData, contentLength, contentMD5, origin, xMsLeaseAction, xMsLeaseId,
        xMsCacheControl, xMsContentDisposition, xMsContentEncoding, xMsContentLanguage, xMsContentMd5, xMsContentType, xMsProperties, ifMatch, ifNoneMatch,
        ifModifiedSince, ifUnmodifiedSince, requestBodyConverted, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, UpdatePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, UpdatePathHeaders> clientResponse = updatePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, UpdatePathHeaders> updatePathDelegate(Response<ResponseBody> response) throws ErrorSchemaException, IOException,
      IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .register(202, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, UpdatePathHeaders.class);
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id" and
   *                       "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.  Use
   *                       "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void leasePath(String xMsLeaseAction, String filesystem, String path) {
    leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path).toBlocking().single().body();
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction  There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id" and
   *                        "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.  Use
   *                        "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> leasePathAsync(String xMsLeaseAction, String filesystem, String path, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path), serviceCallback);
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id" and
   *                       "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.  Use
   *                       "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> leasePathAsync(String xMsLeaseAction, String filesystem, String path) {
    return leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path).map(new Func1<ServiceResponseWithHeaders<Void, LeasePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, LeasePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id" and
   *                       "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.  Use
   *                       "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem     The filesystem identifier.
   * @param path           The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> leasePathWithServiceResponseAsync(String xMsLeaseAction, String filesystem, String
      path) {
    if (xMsLeaseAction == null) {
      throw new IllegalArgumentException("Parameter xMsLeaseAction is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final Integer xMsLeaseDuration = null;
    final String xMsLeaseId = null;
    final String xMsProposedLeaseId = null;
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.leasePath(filesystem, path, xMsLeaseAction, xMsLeaseDuration, xMsLeaseId, xMsProposedLeaseId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, LeasePathHeaders> clientResponse = leasePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id"
   *                           and "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   *                           Use "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsLeaseId         Required when "x-ms-lease-action" is "renew" or "release". For the renew and release actions, this must match the current
   *                           lease ID.
   * @param xMsProposedLeaseId Required when "x-ms-lease-action" is "acquire".  A lease will be acquired with this lease ID if the operation is successful.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void leasePath(String xMsLeaseAction, String filesystem, String path, Integer xMsLeaseDuration, String xMsLeaseId, String xMsProposedLeaseId,
      String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path, xMsLeaseDuration, xMsLeaseId, xMsProposedLeaseId, ifMatch, ifNoneMatch,
        ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id"
   *                           and "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   *                           Use "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsLeaseId         Required when "x-ms-lease-action" is "renew" or "release". For the renew and release actions, this must match the current
   *                           lease ID.
   * @param xMsProposedLeaseId Required when "x-ms-lease-action" is "acquire".  A lease will be acquired with this lease ID if the operation is successful.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> leasePathAsync(String xMsLeaseAction, String filesystem, String path, Integer xMsLeaseDuration, String xMsLeaseId, String
      xMsProposedLeaseId, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout,
      String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path, xMsLeaseDuration, xMsLeaseId,
        xMsProposedLeaseId, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id"
   *                           and "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   *                           Use "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsLeaseId         Required when "x-ms-lease-action" is "renew" or "release". For the renew and release actions, this must match the current
   *                           lease ID.
   * @param xMsProposedLeaseId Required when "x-ms-lease-action" is "acquire".  A lease will be acquired with this lease ID if the operation is successful.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> leasePathAsync(String xMsLeaseAction, String filesystem, String path, Integer xMsLeaseDuration, String xMsLeaseId, String
      xMsProposedLeaseId, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout,
      String xMsDate) {
    return leasePathWithServiceResponseAsync(xMsLeaseAction, filesystem, path, xMsLeaseDuration, xMsLeaseId, xMsProposedLeaseId, ifMatch, ifNoneMatch,
        ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate)
        .map(new Func1<ServiceResponseWithHeaders<Void, LeasePathHeaders>, Void>() {
          @Override
          public Void call(ServiceResponseWithHeaders<Void, LeasePathHeaders> response) {
            return response.body();
          }
        });
  }

  /**
   * Lease Path.
   * Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information,
   * see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param xMsLeaseAction     There are three lease actions: "acquire", "renew", and "release".  Use "acquire" and specify the "x-ms-proposed-lease-id"
   *                           and "x-ms-lease-duration" to acquire a new lease.  Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   *                           Use "release" and specify the "x-ms-lease-id" to release a lease.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param xMsLeaseDuration   The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration
   *                           must be between 15 and 60 seconds.
   * @param xMsLeaseId         Required when "x-ms-lease-action" is "renew" or "release". For the renew and release actions, this must match the current
   *                           lease ID.
   * @param xMsProposedLeaseId Required when "x-ms-lease-action" is "acquire".  A lease will be acquired with this lease ID if the operation is successful.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> leasePathWithServiceResponseAsync(String xMsLeaseAction, String filesystem, String
      path, Integer xMsLeaseDuration, String xMsLeaseId, String xMsProposedLeaseId, String ifMatch, String ifNoneMatch, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (xMsLeaseAction == null) {
      throw new IllegalArgumentException("Parameter xMsLeaseAction is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    return service.leasePath(filesystem, path, xMsLeaseAction, xMsLeaseDuration, xMsLeaseId, xMsProposedLeaseId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, LeasePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, LeasePathHeaders> clientResponse = leasePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, LeasePathHeaders> leasePathDelegate(Response<ResponseBody> response) throws ErrorSchemaException, IOException,
      IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .register(201, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, LeasePathHeaders.class);
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the InputStream object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public InputStream readPath(String filesystem, String path) {
    return readPathWithServiceResponseAsync(filesystem, path).toBlocking().single().body();
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<InputStream> readPathAsync(String filesystem, String path, final ServiceCallback<InputStream> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(readPathWithServiceResponseAsync(filesystem, path), serviceCallback);
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<InputStream> readPathAsync(String filesystem, String path) {
    return readPathWithServiceResponseAsync(filesystem, path).map(new Func1<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>, InputStream>() {
      @Override
      public InputStream call(ServiceResponseWithHeaders<InputStream, ReadPathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> readPathWithServiceResponseAsync(String filesystem, String path) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final String range = null;
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.readPath(filesystem, path, range, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate, this
        .xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<InputStream, ReadPathHeaders> clientResponse = readPathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the InputStream object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public InputStream readPath(String filesystem, String path, String range, String ifMatch, String ifNoneMatch, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return readPathWithServiceResponseAsync(filesystem, path, range, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId,
        timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<InputStream> readPathAsync(String filesystem, String path, String range, String ifMatch, String ifNoneMatch, String ifModifiedSince,
      String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<InputStream> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(readPathWithServiceResponseAsync(filesystem, path, range, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<InputStream> readPathAsync(String filesystem, String path, String range, String ifMatch, String ifNoneMatch, String ifModifiedSince,
      String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return readPathWithServiceResponseAsync(filesystem, path, range, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId,
        timeout, xMsDate).map(new Func1<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>, InputStream>() {
      @Override
      public InputStream call(ServiceResponseWithHeaders<InputStream, ReadPathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Read File.
   * Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param range              The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the observable to the InputStream object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> readPathWithServiceResponseAsync(String filesystem, String path, String
      range, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String
      xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    return service.readPath(filesystem, path, range, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate, this
        .xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<InputStream, ReadPathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<InputStream, ReadPathHeaders> clientResponse = readPathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<InputStream, ReadPathHeaders> readPathDelegate(Response<ResponseBody> response) throws ErrorSchemaException,
      IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<InputStream, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<InputStream>() {
        }.getType())
        .register(206, new TypeToken<InputStream>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, ReadPathHeaders.class);
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void getPathProperties(String filesystem, String path) {
    getPathPropertiesWithServiceResponseAsync(filesystem, path).toBlocking().single().body();
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> getPathPropertiesAsync(String filesystem, String path, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(getPathPropertiesWithServiceResponseAsync(filesystem, path), serviceCallback);
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> getPathPropertiesAsync(String filesystem, String path) {
    return getPathPropertiesWithServiceResponseAsync(filesystem, path).map(new Func1<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> getPathPropertiesWithServiceResponseAsync(String filesystem, String path) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.getPathProperties(filesystem, path, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate,
        this.xMsVersion())
        .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> call(Response<Void> response) {
            try {
              ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders> clientResponse = getPathPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void getPathProperties(String filesystem, String path, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince,
      String xMsClientRequestId, Integer timeout, String xMsDate) {
    getPathPropertiesWithServiceResponseAsync(filesystem, path, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout,
        xMsDate).toBlocking().single().body();
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> getPathPropertiesAsync(String filesystem, String path, String ifMatch, String ifNoneMatch, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(getPathPropertiesWithServiceResponseAsync(filesystem, path, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> getPathPropertiesAsync(String filesystem, String path, String ifMatch, String ifNoneMatch, String ifModifiedSince, String
      ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return getPathPropertiesWithServiceResponseAsync(filesystem, path, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId,
        timeout, xMsDate).map(new Func1<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Get File Properties | Get Directory Properties.
   * Get the properties for a file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional
   * Headers for Blob Service Operations](https://docs.microsoft
   * .com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> getPathPropertiesWithServiceResponseAsync(String filesystem, String path,
      String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    return service.getPathProperties(filesystem, path, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate,
        this.xMsVersion())
        .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders>> call(Response<Void> response) {
            try {
              ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders> clientResponse = getPathPropertiesDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, GetPathPropertiesHeaders> getPathPropertiesDelegate(Response<Void> response) throws ErrorSchemaException,
      IOException, IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildEmptyWithHeaders(response, GetPathPropertiesHeaders.class);
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void deletePath(String resource, String filesystem, String path) {
    deletePathWithServiceResponseAsync(resource, filesystem, path).toBlocking().single().body();
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource        The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem      The filesystem identifier.
   * @param path            The file or directory path.
   * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> deletePathAsync(String resource, String filesystem, String path, final ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(deletePathWithServiceResponseAsync(resource, filesystem, path), serviceCallback);
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> deletePathAsync(String resource, String filesystem, String path) {
    return deletePathWithServiceResponseAsync(resource, filesystem, path).map(new Func1<ServiceResponseWithHeaders<Void, DeletePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, DeletePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource   The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem The filesystem identifier.
   * @param path       The file or directory path.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> deletePathWithServiceResponseAsync(String resource, String filesystem, String path) {
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    final Boolean recursive = null;
    final String continuation = null;
    final String xMsLeaseId = null;
    final String ifMatch = null;
    final String ifNoneMatch = null;
    final String ifModifiedSince = null;
    final String ifUnmodifiedSince = null;
    final String xMsClientRequestId = null;
    final Integer timeout = null;
    final String xMsDate = null;
    return service.deletePath(filesystem, path, recursive, resource, continuation, xMsLeaseId, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince,
        xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, DeletePathHeaders> clientResponse = deletePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param continuation       Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number
   *                           of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation
   *                           token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue
   *                           deleting the directory.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   * @throws ErrorSchemaException     thrown if the request is rejected by server
   * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
   */
  public void deletePath(String resource, String filesystem, String path, Boolean recursive, String continuation, String xMsLeaseId, String ifMatch, String
      ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    deletePathWithServiceResponseAsync(resource, filesystem, path, recursive, continuation, xMsLeaseId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).toBlocking().single().body();
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param continuation       Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number
   *                           of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation
   *                           token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue
   *                           deleting the directory.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @param serviceCallback    the async ServiceCallback to handle successful and failed responses.
   * @return the {@link ServiceFuture} object
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public ServiceFuture<Void> deletePathAsync(String resource, String filesystem, String path, Boolean recursive, String continuation, String xMsLeaseId,
      String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate, final
  ServiceCallback<Void> serviceCallback) {
    return ServiceFuture.fromHeaderResponse(deletePathWithServiceResponseAsync(resource, filesystem, path, recursive, continuation, xMsLeaseId, ifMatch,
        ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate), serviceCallback);
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param continuation       Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number
   *                           of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation
   *                           token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue
   *                           deleting the directory.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the
   *                           timeout value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<Void> deletePathAsync(String resource, String filesystem, String path, Boolean recursive, String continuation, String xMsLeaseId,
      String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String xMsClientRequestId, Integer timeout, String xMsDate) {
    return deletePathWithServiceResponseAsync(resource, filesystem, path, recursive, continuation, xMsLeaseId, ifMatch, ifNoneMatch, ifModifiedSince,
        ifUnmodifiedSince, xMsClientRequestId, timeout, xMsDate).map(new Func1<ServiceResponseWithHeaders<Void, DeletePathHeaders>, Void>() {
      @Override
      public Void call(ServiceResponseWithHeaders<Void, DeletePathHeaders> response) {
        return response.body();
      }
    });
  }

  /**
   * Delete File | Delete Directory.
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   *
   * @param resource           The value must be "file" or "directory" to indicate the resource type.
   * @param filesystem         The filesystem identifier.
   * @param path               The file or directory path.
   * @param recursive          Required and valid only when the resource is a directory.  If "true", all paths beneath the directory will be deleted. If
   *                           "false" and the directory is non-empty, an error occurs.
   * @param continuation       Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number
   *                           of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation
   *                           token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue
   *                           deleting the directory.
   * @param xMsLeaseId         The lease ID must be specified if there is an active lease.
   * @param ifMatch            Optional.  An ETag value. Specify this header to perform the operation only if the resource's ETag matches the value
   *                           specified. The ETag must be specified in quotes.
   * @param ifNoneMatch        Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform the operation only if the
   *                           resource's ETag does not match the value specified. The ETag must be specified in quotes.
   * @param ifModifiedSince    Optional. A date and time value. Specify this header to perform the operation only if the resource has been modified since
   *                           the specified date and time.
   * @param ifUnmodifiedSince  Optional. A date and time value. Specify this header to perform the operation only if the resource has not been modified
   *                           since the specified date and time.
   * @param xMsClientRequestId A UUID recorded in the analytics logs for troubleshooting and correlation.
   * @param timeout            An optional operation timeout value in seconds. The period begins when the request is received by the service. If the timeout
   *                           value elapses before the operation completes, the operation fails.
   * @param xMsDate            Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using shared key authorization.
   * @return the {@link ServiceResponseWithHeaders} object if successful.
   * @throws IllegalArgumentException thrown if parameters fail the validation
   */
  public Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> deletePathWithServiceResponseAsync(String resource, String filesystem, String path,
      Boolean recursive, String continuation, String xMsLeaseId, String ifMatch, String ifNoneMatch, String ifModifiedSince, String ifUnmodifiedSince, String
      xMsClientRequestId, Integer timeout, String xMsDate) {
    if (resource == null) {
      throw new IllegalArgumentException("Parameter resource is required and cannot be null.");
    }
    if (filesystem == null) {
      throw new IllegalArgumentException("Parameter filesystem is required and cannot be null.");
    }
    if (path == null) {
      throw new IllegalArgumentException("Parameter path is required and cannot be null.");
    }
    return service.deletePath(filesystem, path, recursive, resource, continuation, xMsLeaseId, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince,
        xMsClientRequestId, timeout, xMsDate, this.xMsVersion())
        .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>>>() {
          @Override
          public Observable<ServiceResponseWithHeaders<Void, DeletePathHeaders>> call(Response<ResponseBody> response) {
            try {
              ServiceResponseWithHeaders<Void, DeletePathHeaders> clientResponse = deletePathDelegate(response);
              return Observable.just(clientResponse);
            } catch (Throwable t) {
              return Observable.error(t);
            }
          }
        });
  }

  private ServiceResponseWithHeaders<Void, DeletePathHeaders> deletePathDelegate(Response<ResponseBody> response) throws ErrorSchemaException, IOException,
      IllegalArgumentException {
    return this.restClient().responseBuilderFactory().<Void, ErrorSchemaException>newInstance(this.serializerAdapter())
        .register(200, new TypeToken<Void>() {
        }.getType())
        .registerError(ErrorSchemaException.class)
        .buildWithHeaders(response, DeletePathHeaders.class);
  }

  /**
   * The interface defining all the services for AzureDistributedFileSystemRestClient to be
   * used by Retrofit to perform actually REST calls.
   */
  interface AzureDistributedFileSystemRestClientService {
    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient createFilesystem"})
    @PUT("{filesystem}")
    Observable<Response<ResponseBody>> createFilesystem(@Path("filesystem") String filesystem, @Header("x-ms-properties") String xMsProperties, @Header
        ("x-ms-origination-id") String xMsOriginationId, @Query("resource") String resource, @Header("x-ms-client-request-id") String xMsClientRequestId,
        @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient setFilesystemProperties"})
    @PATCH("{filesystem}")
    Observable<Response<ResponseBody>> setFilesystemProperties(@Path("filesystem") String filesystem, @Header("x-ms-properties") String xMsProperties,
        @Header("If-Modified-Since") String ifModifiedSince, @Header("If-Unmodified-Since") String ifUnmodifiedSince, @Query("resource") String resource,
        @Header("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header
        ("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient listPaths"})
    @GET("{filesystem}")
    Observable<Response<ResponseBody>> listPaths(@Path("filesystem") String filesystem, @Query("directory") String directory, @Query("recursive") boolean
        recursive, @Query("continuation") String continuation, @Query("maxResults") Integer maxResults, @Query("resource") String resource, @Header
        ("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header
        ("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient getFilesystemProperties"})
    @HEAD("{filesystem}")
    Observable<Response<Void>> getFilesystemProperties(@Path("filesystem") String filesystem, @Query("resource") String resource, @Header
        ("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header
        ("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient deleteFilesystem"})
    @HTTP(path = "{filesystem}", method = "DELETE", hasBody = true)
    Observable<Response<ResponseBody>> deleteFilesystem(@Path("filesystem") String filesystem, @Header("If-Modified-Since") String ifModifiedSince,
        @Header("If-Unmodified-Since") String ifUnmodifiedSince, @Query("resource") String resource, @Header("x-ms-client-request-id") String
        xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/octet-stream", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient createPath"})
    @PUT("{filesystem}/{path}")
    Observable<Response<ResponseBody>> createPath(@Path("filesystem") String filesystem, @Path("path") String path, @Query("resource") String resource,
        @Query("continuation") String continuation, @Header("Content-Length") String contentLength, @Header("Content-Encoding") String contentEncoding,
        @Header("Content-Language") String contentLanguage, @Header("Content-MD5") String contentMD5, @Header("x-ms-cache-control") String xMsCacheControl,
        @Header("x-ms-content-type") String xMsContentType, @Header("x-ms-content-encoding") String xMsContentEncoding, @Header("x-ms-content-language")
        String xMsContentLanguage, @Header("x-ms-content-md5") String xMsContentMd5, @Header("x-ms-rename-source") String xMsRenameSource, @Header
        ("x-ms-lease-action") String xMsLeaseAction, @Header("x-ms-lease-id") String xMsLeaseId, @Header("x-ms-proposed-lease-id") String
        xMsProposedLeaseId,
        @Header("x-ms-source-lease-action") String xMsSourceLeaseAction, @Header("x-ms-source-lease-id") String xMsSourceLeaseId, @Header("x-ms-properties")
        String xMsProperties, @Header("x-ms-origination-id") String xMsOriginationId, @Header("If-Match") String ifMatch, @Header("If-None-Match") String
        ifNoneMatch, @Header("If-Modified-Since") String ifModifiedSince, @Header("If-Unmodified-Since") String ifUnmodifiedSince, @Header
        ("x-ms-source-if-match") String xMsSourceIfMatch, @Header("x-ms-source-if-none-match") String xMsSourceIfNoneMatch, @Header
        ("x-ms-source-if-modified-since") String xMsSourceIfModifiedSince, @Header("x-ms-source-if-unmodified-since") String xMsSourceIfUnmodifiedSince,
        @Body RequestBody requestBody, @Header("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout, @Header
        ("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/octet-stream", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient updatePath"})
    @PATCH("{filesystem}/{path}")
    Observable<Response<ResponseBody>> updatePath(@Path("filesystem") String filesystem, @Path("path") String path, @Query("action") String action,
        @Query("position") Long position, @Query("retainUncommittedData") Boolean retainUncommittedData, @Header("Content-Length") String contentLength,
        @Header("Content-MD5") String contentMD5, @Header("Origin") String origin, @Header("x-ms-lease-action") String xMsLeaseAction, @Header
        ("x-ms-lease-id") String xMsLeaseId, @Header("x-ms-cache-control") String xMsCacheControl, @Header("x-ms-content-disposition") String
        xMsContentDisposition, @Header("x-ms-content-encoding") String xMsContentEncoding, @Header("x-ms-content-language") String xMsContentLanguage,
        @Header("x-ms-content-md5") String xMsContentMd5, @Header("x-ms-content-type") String xMsContentType, @Header("x-ms-properties") String
        xMsProperties, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Header("If-Modified-Since") String ifModifiedSince,
        @Header("If-Unmodified-Since") String ifUnmodifiedSince, @Body RequestBody requestBody, @Header("x-ms-client-request-id") String
        xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient leasePath"})
    @POST("{filesystem}/{path}")
    Observable<Response<ResponseBody>> leasePath(@Path("filesystem") String filesystem, @Path("path") String path, @Header("x-ms-lease-action") String
        xMsLeaseAction, @Header("x-ms-lease-duration") Integer xMsLeaseDuration, @Header("x-ms-lease-id") String xMsLeaseId, @Header
        ("x-ms-proposed-lease-id") String xMsProposedLeaseId, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Header
        ("If-Modified-Since") String ifModifiedSince, @Header("If-Unmodified-Since") String ifUnmodifiedSince, @Header("x-ms-client-request-id") String
        xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient readPath"})
    @GET("{filesystem}/{path}")
    @Streaming
    Observable<Response<ResponseBody>> readPath(@Path("filesystem") String filesystem, @Path("path") String path, @Header("Range") String range, @Header
        ("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Header("If-Modified-Since") String ifModifiedSince, @Header
        ("If-Unmodified-Since") String ifUnmodifiedSince, @Header("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout,
        @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient getPathProperties"})
    @HEAD("{filesystem}/{path}")
    Observable<Response<Void>> getPathProperties(@Path("filesystem") String filesystem, @Path("path") String path, @Header("If-Match") String ifMatch,
        @Header("If-None-Match") String ifNoneMatch, @Header("If-Modified-Since") String ifModifiedSince, @Header("If-Unmodified-Since") String
        ifUnmodifiedSince, @Header("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout, @Header("x-ms-date") String
        xMsDate, @Header("x-ms-version") String xMsVersion);

    @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.dfs.rest.client.generated"
        + ".AzureDistributedFileSystemRestClient deletePath"})
    @HTTP(path = "{filesystem}/{path}", method = "DELETE", hasBody = true)
    Observable<Response<ResponseBody>> deletePath(@Path("filesystem") String filesystem, @Path("path") String path, @Query("recursive") Boolean
        recursive, @Query("resource") String resource, @Query("continuation") String continuation, @Header("x-ms-lease-id") String xMsLeaseId, @Header
        ("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Header("If-Modified-Since") String ifModifiedSince, @Header
        ("If-Unmodified-Since") String ifUnmodifiedSince, @Header("x-ms-client-request-id") String xMsClientRequestId, @Query("timeout") Integer timeout,
        @Header("x-ms-date") String xMsDate, @Header("x-ms-version") String xMsVersion);

  }
}
